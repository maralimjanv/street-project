from aiogram import types
from states.state import Settings, MainMenu
from keyboards.default.markups import back_uz, settings, menu, city, back_ru, ru, eng, uz
from loader import dp, db


# name
@dp.message_handler(text='–°–º–µ–Ω–∏—Ç—å –∏–º—è', state=Settings.step_one)
async def settings_uz(message: types.Message):
    await message.answer(text='–í–≤–µ–¥–∏—Ç–µ –§.–ò.–û',
                         reply_markup=types.ReplyKeyboardMarkup(resize_keyboard=True).add(back_ru))
    await Settings.set_name_ru.set()


@dp.message_handler(lambda x: x.text != back_ru, state=Settings.set_name_ru)
async def set_name_uz(message: types.Message):
    sql = 'UPDATE products_user SET name = ? WHERE chat_id = ?'
    db.execute(sql=sql, parameters=(message.text, message.from_user.id), commit=True)
    await message.answer(text='–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=settings['ru'])
    await Settings.step_one.set()


@dp.message_handler(text=back_ru, state=Settings.set_name_ru)
async def back_setting_uz(message: types.Message):
    await message.answer(text='–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=settings['ru'])
    await Settings.step_one.set()


@dp.message_handler(text=back_ru, state=Settings.step_one)
async def back_menu(message: types.Message):
    await message.answer(text='–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=menu['ru'])
    await MainMenu.step_one_ru.set()


# contact

@dp.message_handler(text='üì± –°–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä', state=Settings.step_one)
async def set_contact_uz(message: types.Message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton(text='üì± –ú–æ–π –Ω–æ–º–µ—Ä', request_contact=True))
    markup.add(back_uz)
    await message.answer(text=f"""
üì± –ö–∞–∫–æ–π —É –í–∞—Å –Ω–æ–º–µ—Ä. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –≤–∏–¥–µ: 
+998 ** *** ****
""",
                         reply_markup=markup)
    await Settings.set_contact_ru.set()


@dp.message_handler(content_types=['contact'], state=Settings.set_contact_ru)
async def update_contact_uz(message: types.Message):
    sql = 'UPDATE products_user SET contact = ? WHERE chat_id = ?'
    db.execute(sql=sql, parameters=(message.contact.phone_number, message.from_user.id), commit=True)
    await message.answer(text='‚úÖ –ì–æ—Ç–æ–≤–æ')
    await message.answer(text='–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=settings['ru'])

    await Settings.step_one.set()


@dp.message_handler(lambda x: x.content_type != ['contact'] and x.text != back_ru, state=Settings.set_contact_ru)
async def err_contact_uz(message: types.Message):
    await set_contact_uz(message)


@dp.message_handler(text=back_ru, state=Settings.set_contact_ru)
async def back_settings(message: types.Message):
    await message.answer(text='–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=settings['ru'])
    await Settings.step_one.set()


# city

@dp.message_handler(text="üèô –ò–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥", state=Settings.step_one)
async def set_city_uz(message: types.Message):
    await message.answer(text="""
–í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –í—ã –∂–∏–≤—ë—Ç–µ?
–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:
""", reply_markup=city['ru'])
    await Settings.set_city_ru.set()


@dp.message_handler(lambda x: x.text in ['–¢–∞—à–∫–µ–Ω—Ç', '–ê–Ω–¥–∏–∂–∞–Ω', '–°–∞–º–∞—Ä–∫–∞–Ω–¥'], state=Settings.set_city_ru)
async def update_city_uz(message: types.Message):
    sql = 'UPDATE products_user SET city = ? WHERE chat_id = ?'
    db.execute(sql=sql, parameters=(message.text, message.from_user.id), commit=True)
    await message.answer(text='‚úÖ –ì–æ—Ç–æ–≤–æ')
    await message.answer(text='–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=settings['ru'])

    await Settings.step_one.set()


@dp.message_handler(lambda x: x.text not in ['–¢–∞—à–∫–µ–Ω—Ç', '–ê–Ω–¥–∏–∂–∞–Ω', '–°–∞–º–∞—Ä–∫–∞–Ω–¥'], state=Settings.set_city_ru)
async def err_update_city_uz(message: types.Message):
    await message.answer(text="""
–í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –í—ã –∂–∏–≤—ë—Ç–µ?
–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:
    """, reply_markup=city['ru'])
    await Settings.set_city_ru.set()


@dp.message_handler(text='üá∑üá∫ –ò–∑–º–µ–Ω–∏—Ç—å —è–∑—ã–∫', state=Settings.step_one)
async def set_lang(message: types.Message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, keyboard=[
        [types.KeyboardButton(ru), types.KeyboardButton(uz)],
        [types.KeyboardButton(eng)],
        [back_ru]
    ])
    await message.answer(text='–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:', reply_markup=markup)
    await Settings.set_lang_ru.set()


@dp.message_handler(lambda x: x.text in [uz, ru, eng] and x.text != back_ru, state=Settings.set_lang_ru)
async def update_lang(message: types.Message):
    if message.text == uz:
        sql = 'select city from products_user where chat_id = ?'
        city = db.execute(sql=sql, parameters=(message.from_user.id,), fetchone=True)[0]
        uz_city = db.execute(sql=
                             """select name_uz from city
                             where name_ru = ? """, parameters=(city,), fetchone=True)[0]
        sql = 'UPDATE products_user SET lang = ?, city = ? WHERE chat_id = ?'
        db.execute(sql=sql, parameters=(uz, uz_city, message.from_user.id), commit=True)
        await message.answer(text='Harakat tanlang:', reply_markup=settings['uz'])
        await Settings.step_one.set()
    elif message.text == eng:
        sql = 'select city from products_user where chat_id = ?'
        city = db.execute(sql=sql, parameters=(message.from_user.id,), fetchone=True)[0]
        ru_city = db.execute(sql=
                             """select name_eng from city
                             where name_ru = ?""", parameters=(city,), fetchone=True)[0]
        sql = 'UPDATE products_user SET lang = ?, city = ? WHERE chat_id = ?'
        db.execute(sql=sql, parameters=(eng, ru_city, message.from_user.id), commit=True)
        await message.answer(text='Choose an action:', reply_markup=settings['eng'])
        await Settings.step_one.set()
    else:

        await message.answer(text='–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=settings['ru'])
        await Settings.step_one.set()


@dp.message_handler(text=back_ru, state=Settings.set_lang_ru)
async def back_setting_menu(message: types.Message):
    await message.answer(text='–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=settings['ru'])
    await Settings.step_one.set()
